#!../venv/bin/python

import itertools
import numpy as np

from gensim.models import KeyedVectors
from gensim.parsing.preprocessing import *

from reprLearning.documentFrequency import getDocumentFrequencies
from reprLearning.weightLearningNetwork import WeightLearningNetwork

from util.containers import LazyModel

def preprocess(stories):
	stories = map(strip_punctuation, stories)
	stories = map(strip_numeric, stories)
	stories = map(strip_multiple_whitespaces, stories)
	return list(stories)


#some test stories from Veroff
nonArousedStories = preprocess(["A MAN IS SHOWING ANOTHER MAN AN OBJECT IN HIS HAND. THE PERSONS ARE PROBABLY PUBLIC OFFICIALS, AND ONE INDIVIDUAL IS THREATENING TO EXPOSE THE OTHER WITH THE DAMAGING EVIDENCE IN HIS HAND. THE MAN HAS BEEN IN CORRUPT POLITICS AND THE OTHER MAN IS TRYING TO EXPOSE HIM, PERHAPS FOR BLACKMAIL. THE MAN WITHOUT THE EVIDENCE IS WONDERING WHAT TO DO. WHETHER HE SHOULD BUMP HIM OFF, OR PAY THE BLACKMAIL. THE CORRUPT MAN WILL PAY THE BLACKMAIL MONEY, AND HE WILL STAY IN POLITICS.",
"A TEACHER IS EXPLAINING SOMETHING TO HIS CLASS. ONE STUDENT IS LISTENING, WHILE THE OTHER STUDENTS WATCHING THE CIGARETTE IN THE TEACHERS HAND. THE TEACHER LIT THE CIGARETTE, AND WHILE EXPLAINING SOMETHING TO THE STUDENT HE LET IT BURN DOWN UNTIL THERE WERE A LOT OF ASHES AT ITS END. THE STUDENT THINKS THE ASHES ARE GOING TO FALL TO THE FLOOR, THIS IS WHAT THEY WANT. THE TEACHER IS TRYING TO TEACH THE ONE STUDENT SOMETHING. THE ASHES WILL FALL TO THE FLOOR, THE CLASS WILL LAUGH, AND THE THOUGHT IN THE INDIVIDUALS MIND WHO IS BEING TAUGHT WILL VANISH.",
"THERE ARE FOUR PERSONS, PROBABLY ALL FROM THE SAME FIRM. ONE HAS JUST COME BACK FROM A VACATION AND IS EXPLAINING HIS VACATION TO THE INDIVIDUALS PRESENT. THE INDIVIDUAL WENT ON A VACATION, AND IS NOW TELLING THEM ABOUT IT. THE MEN LISTENING ARE WONDERING ABOUT THE MAN S VACATION. THEY WONDER IF HIS FISH REALLY WAS THAT BIG, THE STORY TELLER IS WONDERING IF HE IS GETTING HIS STORY OVER. THAT IS WHAT THE STORY TELLER WANTS. THE OTHERS WANT HIM TO FINISH THE STORY. THE STORY TELLER WILL FINISH HIS STORY, AND THE MEN WILL GO BACK TO WORK."
])

arousedStories = preprocess(["THE PERSONS APPEAR TO BE TWO BUSINESSMEN -HIGH EXECUTIVES WHO ARE DISCUSSING SOME PHASE OF THEIR BUSINESS S OPERATION. THERE HAS BEEN A DISCREPANCY AMONG THESE MEN IN THEIR BUSINESS. THIS IS OBVIOUSLY A CONFERENCE TO HASH OUT THE CONTROVERSY. THE OLDER MAN WHO MAYBE THE WISER IS TRYING TO EXPLAIN HIS POSITION TO THE YOUNGER,JUNIOR EXECUTIVE. THIS JUNIOR EXECUTIVE IS TRYING TO GET HIS POINT OVER. THE OLDER MAN WILL WIN HIS POINT. HE IS NOT GOING TO HOLD ANY GRUDGES AGAINST HIS JUNIOR EXECUTIVE. ALL WILL TURN OUT FOR THE BEST INTEREST OF THE COMPANY.",
"A CLASS IS IN SESSION. THE PEOPLE SITTING ARE STUDENTS. THE MAN IN THE JACKET IS THE INSTRUCTOR. MANY CLASSES HAVE BEEN HELD IN THE PAST. SEVERAL OF THE STUDENTS HAVE LOST INTEREST IN THE COURSE. THE INSTRUCTOR IS TRYING TO TEACH HIS PUPIL. SOME OF THE STUDENTS ARE INTERESTED IN WHAT HE IS SAYING WHILE OTHERS ARE ALMOST COMPLETELY APATHETIC AND CARE LITTLE FOR HIS COURSE. THE CLASS WILL CONTINUE TO MEET. SOME OF THESE DISINTERESTED STUDENTS WILL NOT DO WELL IN THE COURSE. MANY OF THOSE WITH GREAT INTEREST WILL DO WELL, THOUGH. ",
"A CANDIDATE FOR PUBLIC OFFICE IS IN HIS CAMPAIGN HEADQUARTERS WITH  THREE OF HIS CAMPAIGN ASSISTANTS. THE CAMPAIGN HAS BEEN LASTING  FOR SEVERAL MONTHS AND MUCH ENERGY, TIME, AND MONEY HAVE BEEN  EXPENDED IN THE EFFORT. THE PEOPLE ARE DISCUSSING PLANS FOR THEIR  FINAL PUSH OF THE CAMPAIGN. THEY MUST DECIDE WHERE SPEECHES ARE  TO BE MADE AND WHAT THE CONTENTS MUST BE. THE CAMPAIGN WILL RUN  SMOOTHLY AND DUE TO EFFICIENT AND CONSCIENTIOUS WORK, THE CANDIDATE  WILL WIN HIS OFFICE. THE ASSISTANTS WILL BE REWARDED WITH GOOD  POLITICAL JOBS."
])

pairsAroused = itertools.filterfalse(lambda x: np.array_equal(*x), itertools.product(nonArousedStories, nonArousedStories))
pairsNonAroused = itertools.filterfalse(lambda x: np.array_equal(*x), itertools.product(arousedStories, arousedStories))
pairsAroused = map(lambda x: ";".join(x), pairsAroused)
pairsNonAroused = map(lambda x: ";".join(x), pairsNonAroused)

pairs = list(pairsAroused) + list(pairsNonAroused)

noPairs = itertools.filterfalse(lambda x: np.array_equal(*x), itertools.product(arousedStories, nonArousedStories))
noPairs = list(map(lambda x: ";".join(x), noPairs))

maxLen = max(max(map(lambda x: len(x.split(" ")), noPairs)), max(map(lambda x: len(x.split(" ")), pairs)))

print(maxLen)


modelPath = "/storage/MA/GoogleNews-vectors-negative300.bin"
wordvectormodel = LazyModel(KeyedVectors.load_word2vec_format, modelPath, binary=modelPath.endswith("bin"))

docFreq = getDocumentFrequencies(arousedStories + nonArousedStories, wordvectormodel)

wln = WeightLearningNetwork(wordvectormodel, maxLen)
result = wln.run(pairs, noPairs, docFreq)

import pdb
pdb.set_trace()